const { GoatWrapper } = require("fca-liane-utils");
const os = require('os');
const { bold } = require("fontstyles");

module.exports = {
  config: {
    name: 'uptime',
    aliases: ['stats', 'status', 'system', 'rtm'],
    version: '1.5',
     usePrefix: false,
    author: 'Mahi--',
    countDown: 15,
    role: 0,
    shortDescription: 'Display bot uptime and system stats with media ban check',
    longDescription: {
      id: 'Display bot uptime and system stats with media ban check',
      en: 'Display bot uptime and system stats with media ban check'
    },
    category: 'system',
    guide: {
      id: '{pn}: Display bot uptime and system stats with media ban check',
      en: '{pn}: Display bot uptime and system stats with media ban check'
    }
  },
  onStart: async function ({ message, event, usersData, threadsData, api }) {
    // Anti-Author Change Check
    if (this.config.author !== 'Mahi--') {
      return message.reply("‚ö† ùó®ùóªùóÆùòÇùòÅùóµùóºùóøùó∂ùòáùó≤ùó± ùóÆùòÇùòÅùóµùóºùóøùó∂ùòÅùòÜ ùó∞ùóµùóÆùóªùó¥ùó≤ ùó±ùó≤ùòÅùó≤ùó∞ùòÅùó≤ùó±. ùóñùóºùó∫ùó∫ùóÆùóªùó± ùó≤ùòÖùó≤ùó∞ùòÇùòÅùó∂ùóºùóª ùòÄùòÅùóºùóΩùóΩùó≤ùó±.");
    }

    const startTime = Date.now();
    const users = await usersData.getAll();
    const groups = await threadsData.getAll();
    const uptime = process.uptime();

    try {
      // Uptime calculation
      const days = Math.floor(uptime / (3600 * 24));
      const hours = Math.floor((uptime % (3600 * 24)) / 3600);
      const minutes = Math.floor((uptime % 3600) / 60);
      const seconds = Math.floor(uptime % 60);

      // System Stats
      const memoryUsage = process.memoryUsage();
      const totalMemory = os.totalmem();
      const freeMemory = os.freemem();
      const usedMemory = totalMemory - freeMemory;
      const memoryUsagePercentage = (usedMemory / totalMemory * 100).toFixed(2);

      const cpuUsage = os.loadavg();
      const cpuCores = os.cpus().length;
      const cpuModel = os.cpus()[0].model;
      const nodeVersion = process.version;
      const platform = os.platform();
      const networkInterfaces = os.networkInterfaces();

      const networkInfo = Object.keys(networkInterfaces).map(interface => {
        return {
          interface,
          addresses: networkInterfaces[interface].map(info => `${info.family}: ${info.address}`)
        };
      });

      const endTime = Date.now();
      const botPing = endTime - startTime;

      // Calculate total messages processed
      const totalMessages = users.reduce((sum, user) => sum + (user.messageCount || 0), 0);

      // Check media ban status
      const mediaBan = await threadsData.get(event.threadID, 'mediaBan') || false;
      const mediaBanStatus = mediaBan ? 'üö´ ùôºùöéùöçùöíùöä ùöíùöú ùöåùöûùöõùöõùöéùöóùöùùöïùö¢ ùöãùöäùöóùöóùöéùöç ùöíùöó ùöùùöëùöíùöú ùöåùöëùöäùöù.' : '‚úÖ ùôºùöéùöçùöíùöä ùöíùöú ùöóùöòùöù ùöãùöäùöóùöóùöéùöç ùöíùöó ùöùùöëùöíùöú ùöåùöëùöäùöù.';

      // Uptime-dependent response
      const uptimeResponse = uptime > 86400 ? "ùô∏'ùöüùöé ùöãùöéùöéùöó ùöõùöûùöóùöóùöíùöóùöê ùöèùöòùöõ ùööùöûùöíùöùùöé ùöä ùö†ùöëùöíùöïùöé ùöóùöòùö†! üí™" : "ùôπùöûùöúùöù ùöêùöéùöùùöùùöíùöóùöê ùöúùöùùöäùöõùöùùöéùöç! üòé";

      // Break the message content into 5 segments for 5 edits
      const editSegments = [
        `üñ• ${bold("System Statistics")}:\n‚Ä¢ ùêîùê©ùê≠ùê¢ùê¶ùêû: ${days}d ${hours}h ${minutes}m ${seconds}s\n‚Ä¢ Memory Usage: ${(memoryUsage.rss / 1024 / 1024).toFixed(2)} MB`,
        `‚Ä¢ ùêìùê®ùê≠ùêöùê• ùêåùêûùê¶ùê®ùê´ùê≤: ${(totalMemory / 1024 / 1024 / 1024).toFixed(2)} ùêÜùêÅ\n‚Ä¢ ùêÖùê´ùêûùêû ùêåùêûùê¶ùê®ùê´ùê≤: ${(freeMemory / 1024 / 1024 / 1024).toFixed(2)} ùêÜùêÅ\n‚Ä¢ ùêåùêûùê¶ùê®ùê´ùê≤ ùêîùê¨ùêöùê†ùêû: ${memoryUsagePercentage}%\n‚Ä¢ ùêÇùêèùêî ùêîùê¨ùêöùê†ùêû (1m): ${cpuUsage[0].toFixed(2)}%`,
        `‚Ä¢ ùêÇùêèùêî ùêîùê¨ùêöùê†ùêû (5m): ${cpuUsage[1].toFixed(2)}%\n‚Ä¢ ùêÇùêèùêî ùêîùê¨ùêöùê†ùêû (15m): ${cpuUsage[2].toFixed(2)}%\n‚Ä¢ ùêÇùêèùêî ùêÇùê®ùê´ùêûùê¨: ${cpuCores}\n‚Ä¢ ùêÇùêèùêî ùêåùê®ùêùùêûùê•: ${cpuModel}`,
        `‚Ä¢ ùêçùê®ùêùùêû.ùê£ùê¨ ùêïùêûùê´ùê¨ùê¢ùê®ùêß: ${nodeVersion}\n‚Ä¢ ùêèùê•ùêöùê≠ùêüùê®ùê´ùê¶: ${platform}\n‚Ä¢ ùêèùê¢ùêßùê†: ${botPing}ms\n‚Ä¢ ùêìùê®ùê≠ùêöùê• ùêîùê¨ùêûùê´ùê¨: ${users.length}\n‚Ä¢ ùêìùê®ùê≠ùêöùê• ùêÜùê´ùê®ùêÆùê©ùê¨: ${groups.length}`,
        `‚Ä¢ ùêåùêûùê¨ùê¨ùêöùê†ùêûùê¨ ùêèùê´ùê®ùêúùêûùê¨ùê¨ùêûùêù: ${totalMessages}\n${mediaBanStatus}\n\nüåê ${bold("Network Interfaces")}:\n${networkInfo.map(info => `‚Ä¢ ${info.interface}: ${info.addresses.join(', ')}`).join('\n')}\n\n${uptimeResponse}`
      ];

      // Loading animation frames
      const loadingFrames = [
        'ùôªùôæùô∞ùô≥ùô∏ùôΩùô∂.\n[‚ñ¨‚ó°Ãà‚ÉùÔ∏é‚ñ≠‚ñ≠‚ñ≠‚ñ≠]ùüèùüé%',
        'ùôªùôæùô∞ùô≥ùô∏ùôΩùô∂..\n[‚ñ¨‚ñ¨‚ó°Ãà‚ÉùÔ∏é‚ñ≠‚ñ≠‚ñ≠ùüëùüé%]',
        'ùôªùôæùô∞ùô≥ùô∏ùôΩùô∂...\n[‚ñ¨‚ñ¨‚ñ¨‚ó°Ãà‚ÉùÔ∏é‚ñ≠‚ñ≠ùüìùüé%]',
        'ùôªùôæùô∞ùô≥ùô∏ùôΩùô∂...\n[‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ó°Ãà‚ÉùÔ∏é‚ñ≠ùüñùüé%]',
        'ùôªùôæùô∞ùô≥ùô¥ùô≥...\n[‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ó°Ãà‚ÉùÔ∏é]ùüèùüéùüé%'
      ];

      // Send the initial message
      let sentMessage = await message.reply("üñ• ùêàùêßùê¢ùê≠ùê¢ùêöùê•ùê¢ùê≥ùê¢ùêßùê† ùê¨ùê≤ùê¨ùê≠ùêûùê¶ùê¨ ùê¨ùê≠ùêöùê≠ùêû...");

      // Function to edit the message up to 5 times
      const editMessageContent = (index) => {
        if (index < editSegments.length) {
          const loadingProgress = loadingFrames[index];
          const currentContent = `${loadingProgress}\n\n${editSegments.slice(0, index + 1).join('\n\n')}`;
          api.editMessage(currentContent, sentMessage.messageID);
          setTimeout(() => editMessageContent(index + 1), 600); // Fast animation with 600ms delay
        }
      };

      // Start editing the message
      editMessageContent(0);

    } catch (err) {
      console.error(err);
      return message.reply("‚ùå An error occurred while fetching system statistics.");
    }
  }
};
const wrapper = new GoatWrapper(module.exports);
wrapper.applyNoPrefix({ allowPrefix: true });
